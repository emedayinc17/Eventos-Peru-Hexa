# services/iam-service/app/domain/ports.py
from __future__ import annotations
from typing import Protocol, Optional, List, Dict, Any
from datetime import datetime

class PasswordHasher(Protocol):
    def hash(self, plain_password: str) -> str: ...
    def verify(self, plain_password: str, password_hash: str) -> bool: ...

class TokenService(Protocol):
    def create_access_token(self, sub: str, role: str, extra_claims: Optional[Dict[str, Any]] = None) -> str: ...
    def decode_token(self, token: str) -> Dict[str, Any]: ...

class UsuarioDTO(dict):
    """
    DTO simple para aislar application de ORM.
    Campos esperados: id, email, nombre, telefono, status, last_login (opc.)
    """
    pass

class UsuarioRepository(Protocol):
    def get_by_email(self, email: str) -> Optional[UsuarioDTO]: ...
    def get_by_id(self, user_id: str) -> Optional[UsuarioDTO]: ...
    def list(self, limit: int = 50, offset: int = 0) -> List[UsuarioDTO]: ...
    def create(self, data: Dict[str, Any]) -> UsuarioDTO: ...
    def update(self, user_id: str, changes: Dict[str, Any]) -> UsuarioDTO: ...
    def soft_delete(self, user_id: str) -> None: ...
    def set_last_login(self, user_id: str, when: Optional[datetime] = None) -> None: ...
